import abc
from dataclasses import dataclass
from typing import List

import injector

from watson_extension.clients import VulnerabilityURL
from watson_extension.clients.identity import AbstractUserIdentityProvider
from watson_extension.clients.platform_request import AbstractPlatformRequest


@dataclass
class CVEInfo:
    id: str
    systems_affected: int
    impact: str
    link: str


class VulnerabilityClient(abc.ABC):
    @abc.abstractmethod
    async def find_cves(self, vulnerability_limit: int) -> List[CVEInfo]: ...


class VulnerabilityClientHttp(VulnerabilityClient):
    def __init__(
        self,
        vulnerability_url: injector.Inject[VulnerabilityURL],
        user_identity_provider: injector.Inject[AbstractUserIdentityProvider],
        platform_request: injector.Inject[AbstractPlatformRequest],
    ):
        super().__init__()
        self.vulnerability_url = vulnerability_url
        self.user_identity_provider = user_identity_provider
        self.platform_request = platform_request

    async def find_cves(
        self,
        vulnerability_limit: int = 5,
    ) -> List[CVEInfo]:
        query = f"limit={vulnerability_limit}&sort=-cvss_score&affecting=true&advisory_available=true"

        request = f"/api/vulnerability/v1/vulnerabilities/cves?{query}"
        response = await self.platform_request.get(
            self.vulnerability_url,
            request,
            user_identity=await self.user_identity_provider.get_user_identity(),
        )
        response.raise_for_status()

        content = await response.json()

        cve_attributes = [
            CVEInfo(
                id=d["id"],
                systems_affected=d["attributes"]["systems_affected"],
                impact=d["attributes"]["impact"],
                link="/insights/vulnerability/cves/{}".format(d["id"]),
            )
            for d in content["data"]
        ]

        return cve_attributes
